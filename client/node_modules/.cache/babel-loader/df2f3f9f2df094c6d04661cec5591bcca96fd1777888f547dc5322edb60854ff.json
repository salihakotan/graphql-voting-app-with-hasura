{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\nimport { ApolloLink } from \"../core/index.js\";\nvar WebSocketLink = /** @class */function (_super) {\n  __extends(WebSocketLink, _super);\n  function WebSocketLink(paramsOrClient) {\n    var _this = _super.call(this) || this;\n    if (paramsOrClient instanceof SubscriptionClient) {\n      _this.subscriptionClient = paramsOrClient;\n    } else {\n      _this.subscriptionClient = new SubscriptionClient(paramsOrClient.uri, paramsOrClient.options, paramsOrClient.webSocketImpl);\n    }\n    return _this;\n  }\n  WebSocketLink.prototype.request = function (operation) {\n    return this.subscriptionClient.request(operation);\n  };\n  return WebSocketLink;\n}(ApolloLink);\nexport { WebSocketLink };","map":{"version":3,"names":["SubscriptionClient","ApolloLink","WebSocketLink","_super","__extends","paramsOrClient","_this","call","subscriptionClient","uri","options","webSocketImpl","prototype","request","operation"],"sources":["C:\\Users\\Clara\\Desktop\\GitProjects\\GRAPHQL\\voting-app-hasura\\client\\node_modules\\@apollo\\src\\link\\ws\\index.ts"],"sourcesContent":["import type { ClientOptions } from \"subscriptions-transport-ws\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\n\nimport type { Operation, FetchResult } from \"../core/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport type { Observable } from \"../../utilities/index.js\";\n\nexport namespace WebSocketLink {\n  /**\n   * Configuration to use when constructing the subscription client (subscriptions-transport-ws).\n   */\n  export interface Configuration {\n    /**\n     * The endpoint to connect to.\n     */\n    uri: string;\n\n    /**\n     * Options to pass when constructing the subscription client.\n     */\n    options?: ClientOptions;\n\n    /**\n     * A custom WebSocket implementation to use.\n     */\n    webSocketImpl?: any;\n  }\n}\n\n// For backwards compatibility.\nexport import WebSocketParams = WebSocketLink.Configuration;\n\nexport class WebSocketLink extends ApolloLink {\n  private subscriptionClient: SubscriptionClient;\n\n  constructor(\n    paramsOrClient: WebSocketLink.Configuration | SubscriptionClient\n  ) {\n    super();\n\n    if (paramsOrClient instanceof SubscriptionClient) {\n      this.subscriptionClient = paramsOrClient;\n    } else {\n      this.subscriptionClient = new SubscriptionClient(\n        paramsOrClient.uri,\n        paramsOrClient.options,\n        paramsOrClient.webSocketImpl\n      );\n    }\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    return this.subscriptionClient.request(\n      operation\n    ) as Observable<FetchResult>;\n  }\n}\n"],"mappings":";AACA,SAASA,kBAAkB,QAAQ,4BAA4B;AAG/D,SAASC,UAAU,QAAQ,kBAAkB;AA4B7C,IAAAC,aAAA,0BAAAC,MAAA;EAAmCC,SAAA,CAAAF,aAAA,EAAAC,MAAA;EAGjC,SAAAD,cACEG,cAAgE;IAEhE,IAAAC,KAAA,GAAAH,MAAK,CAAAI,IAAA,MAAE;IAEP,IAAIF,cAAc,YAAYL,kBAAkB,EAAE;MAChDM,KAAI,CAACE,kBAAkB,GAAGH,cAAc;IAC1C,CAAC,MAAM;MACLC,KAAI,CAACE,kBAAkB,GAAG,IAAIR,kBAAkB,CAC9CK,cAAc,CAACI,GAAG,EAClBJ,cAAc,CAACK,OAAO,EACtBL,cAAc,CAACM,aAAa,CAC7B;IACH;;EACF;EAEOT,aAAA,CAAAU,SAAA,CAAAC,OAAO,GAAd,UAAeC,SAAoB;IACjC,OAAO,IAAI,CAACN,kBAAkB,CAACK,OAAO,CACpCC,SAAS,CACiB;EAC9B,CAAC;EACH,OAAAZ,aAAC;AAAD,CAAC,CAxBkCD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}